# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: hello-sf

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  region: eu-central-1
  runtime: nodejs6.10
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/hello-${self:provider.stage}

custom:
  defaultStage: dev
  profiles:
    dev: hello
    prod: hello
  defaultDomainName: ""
  domainName: ${env:HELLO_DOMAIN, self:custom.defaultDomainName}
  tableName: hello-${self:provider.stage}

plugins:
  - serverless-step-functions
  - serverless-plugin-include-dependencies
  - serverless-pseudo-parameters
  - serverless-enable-api-logs

package:
  include:
    - src/handler/**
  exclude:
    - node_modules/**

functions:
  hello:
    handler: src/handler/hello.handler
  hello2db:
    handler: src/handler/hello2db.handler
    environment:
      TABLE_NAME: ${self:custom.tableName}
  getHello:
    handler: src/handler/getHelloFromDb.handler
    environment:
      TABLE_NAME: ${self:custom.tableName}
    events:
      - http:
          path: hello/{requestId}
          method: GET
  getAllHello:
    handler: src/handler/getAllHelloFromDb.handler
    environment:
      TABLE_NAME: ${self:custom.tableName}
    events:
      - http:
          path: hello
          method: GET

stepFunctions:
  stateMachines:
    hello:
      events:
        - http:
            path: hello
            method: POST
      definition:
        StartAt: HelloWorld
        States:
          HelloWorld:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-hello
            ResultPath: $.msg
            Catch:
              - ErrorEquals: ["States.TaskFailed"]
                ResultPath: $.error-info
                Next: fallback
            Next: Hello2Db
          Hello2Db:
            Type: Task
            Resource: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-hello2db
            ResultPath: $.success
            End: true
          fallback:
            Type: Pass
            Result: "Hello, Fallback."
            End: true

resources:
  Conditions:
    CreateCustomDomainMapping:
      Fn::Not: [Fn::Equals: ["${self:custom.domainName}", ""]]
  Resources:
    HelloDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: hello-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: requestId
            AttributeType: S
        KeySchema:
          - AttributeName: requestId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    HelloAPICustomDomainMapping:
      Type: AWS::ApiGateway::BasePathMapping
      DependsOn: ApiGatewayStage
      Condition: CreateCustomDomainMapping
      Properties:
        BasePath: hello-${self:provider.stage}
        DomainName: ${self:custom.domainName}
        RestApiId:
          Ref: ApiGatewayRestApi
        Stage: ${self:provider.stage}
